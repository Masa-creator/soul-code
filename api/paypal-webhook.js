const fetch = require('node-fetch');
async function getAccessToken(clientId, secret){ const t = await fetch('https://api-m.paypal.com/v1/oauth2/token',{method:'POST',headers:{'Authorization':'Basic '+Buffer.from(clientId+':'+secret).toString('base64'),'Content-Type':'application/x-www-form-urlencoded'},body:'grant_type=client_credentials'}); return t.json(); }
module.exports = async (req,res)=>{ if(req.method!=='POST') return res.status(405).send('Method Not Allowed'); const event = req.body; const clientId=process.env.PAYPAL_CLIENT_ID, secret=process.env.PAYPAL_CLIENT_SECRET, webhookId=process.env.PAYPAL_WEBHOOK_ID; if(!clientId||!secret||!webhookId) return res.status(500).json({error:'PayPal config missing'}); try{ const tok = await getAccessToken(clientId,secret); const access = tok.access_token; const verifyPayload = { auth_algo: req.headers['paypal-auth-algo'], cert_url: req.headers['paypal-cert-url'], transmission_id: req.headers['paypal-transmission-id'], transmission_sig: req.headers['paypal-transmission-sig'], transmission_time: req.headers['paypal-transmission-time'], webhook_id: webhookId, webhook_event: event }; const v = await fetch('https://api-m.paypal.com/v1/notifications/verify-webhook-signature',{method:'POST',headers:{'Authorization':'Bearer '+access,'Content-Type':'application/json'},body:JSON.stringify(verifyPayload)}); const verification = await v.json(); if(verification.verification_status !== 'SUCCESS') return res.status(400).json({error:'Webhook verification failed',detail:verification}); if(event.event_type==='PAYMENT.CAPTURE.COMPLETED' || event.event_type==='CHECKOUT.ORDER.APPROVED'){ const capture = event.resource; const payer_email = (capture.payer && capture.payer.email_address) || process.env.DELIVERY_TO_EMAIL; const plan = 'light'; const gen = await fetch((process.env.VERCEL_URL?process.env.VERCEL_URL:'http://localhost:3000')+'/api/generate',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({plan,name:(capture.payer && capture.payer.name && capture.payer.name.given_name)||'購入者',birth:'1990-01-01',orderID:capture.id})}); const j = await gen.json(); if(process.env.SENDGRID_API_KEY){ const mail = { personalizations:[{ to:[{ email: payer_email || process.env.DELIVERY_TO_EMAIL }], subject: '【SOUL CODE】あなたの鑑定が届きました' }], from:{ email: process.env.DELIVERY_FROM_EMAIL || 'no-reply@soulcode.example' }, content:[{ type:'text/plain', value: j.text || '鑑定を生成しました。' }] }; await fetch('https://api.sendgrid.com/v3/mail/send',{method:'POST',headers:{'Authorization':'Bearer '+process.env.SENDGRID_API_KEY,'Content-Type':'application/json'},body:JSON.stringify(mail)}); } return res.status(200).json({ok:true,generated:!!j.text}); } return res.status(200).json({ok:true,note:'ignored event'}); }catch(e){ return res.status(500).json({error:String(e)}); } };
